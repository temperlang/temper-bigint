
let bits = 15;
var pow2s = new ListBuilder<Int>();
var pow2 = 1;
for (var i = 0; i < bits; i++) {
  pow2s.add(pow2);
  pow2 *= 2;
}
let digitChars = "0123456789abcdefghijklmnopqrstuvwxyz".split("");
var nat10 = Natural.fromInt(10);
var natPow10Cache = new ListBuilder<Natural>();

let reverse<T>(lb: ListBuilder<T>): Void {
  for (var i = lb.length / 2 - 1; i >= 0; i--) {
    var tmp = lb[i];
    lb[i] = lb[lb.length - i - 1];
    lb[lb.length - i - 1] = tmp;
  }
}

let idString(s: String): String {
  return s;
}

export class DivMod<T> {
  public quotient: T;
  public remainder: T;
}

export class Natural {
  public digits: Listed<Int>;

  public static fromInt(i: Int): Natural {
    var parts = new ListBuilder<Int>();
    while (i > 0) {
      parts.add(i % pow2);
      i /= pow2;
    }
    return new Natural(parts);
  }

  public static fromString(s: String): Natural {
    var parts = s.split("");
    var ret = Natural.fromInt(0);
    var ten = Natural.fromInt(10);
    for (var i = 0; i < parts.length; i++) {
      ret = ret.mul(ten).add(Natural.fromInt(parts[i].codePoints.read() - 48));
    }
    return ret;
  }

  private maxLengthWith(other: Natural): Int {
    var length = digits.length;
    var otherLength = other.digits.length;
    if (length > otherLength) {
      return length;
    } else {
      return otherLength
    }
  }

  public shl(n: Int): Natural {
    var ret = this;
    for (var i = 0; i < n; i++) {
      ret = ret.add(ret);
    }
    return ret;
  }

  public shr(n: Int): Natural {
    var ret = new ListBuilder<Int>();
    var src = n / bits;
    var div = pow2s.getOr(n % bits, 0);
    var mul = pow2s.getOr(bits - n % bits, 0);
    for (var i = src; i < digits.length; i++) {
      var low = digits.getOr(i, 0);
      var high = digits.getOr(i + 1, 0);
      var lowPart = low / div;
      var highPart = high * mul;
      var full = lowPart + highPart;
      ret.add(full % pow2);
    }
    while (ret.length != 0 && ret[ret.length - 1] == 0) {
      ret.removeLast();
    }
    return new Natural(ret);
  }

  public cmp(other: Natural): Int {
    for (var i = maxLengthWith(other) - 1; i >= 0; i--) {
      var digit = digits.getOr(i, 0);
      var otherDigit = other.digits.getOr(i, 0);

      if (digit < otherDigit) {
        return -1;
      }
      if (digit > otherDigit) {
        return 1;
      }
    }
    return 0;
  }

  public add(other: Natural): Natural {
    var ret = new ListBuilder<Int>();
    var end = maxLengthWith(other);
    var carry = 0;
    for (var i = 0; i < end; i++) {
      var digit = digits.getOr(i, 0);
      var otherDigit = other.digits.getOr(i, 0);
      var sum = digit + otherDigit + carry;
      if (sum >= pow2) {
        carry = 1;
        sum -= pow2;
      } else {
        carry = 0;
      }
      ret.add(sum);
    }
    ret.add(carry);
    while (ret.length != 0 && ret[ret.length - 1] == 0) {
      ret.removeLast();
    }
    return new Natural(ret);
  }

  public sub(other: Natural): Natural {
    var ret = new ListBuilder<Int>();
    var end = maxLengthWith(other);
    var borrow = 0;
    for (var i = 0; i < end; i++) {
      var digit = digits.getOr(i, 0);
      var otherDigit = other.digits.getOr(i, 0);
      var diff = digit - otherDigit - borrow;
      if (diff < 0) {
        borrow = 1;
        diff += pow2;
      } else {
        borrow = 0;
      }
      ret.add(diff);
    }
    while (ret.length != 0 && ret[ret.length - 1] == 0) {
      ret.removeLast();
    }
    return new Natural(ret);
  }

  public mul(other: Natural): Natural {
    var ret = Natural.fromInt(0);
    for (var i = 0; i < digits.length; i++) {
      var part = new ListBuilder<Int>();
      var carry = 0;

      for (var j = 0; j < i; j++) {
        part.add(0);
      }

      for (var j = 0; j < other.digits.length; j++) {
        var digit = digits.getOr(i, 0);
        var otherDigit = other.digits.getOr(j, 0);
        var value = digit * otherDigit + carry;
        carry = value / pow2;
        part.add(value % pow2);
      }
      
      part.add(carry);

      ret = ret.add(new Natural(part));
    }
    return ret;
  }

  public isZero(): Boolean {
    for (var i = 0; i < digits.length; i++) {
      if (digits.getOr(i, 0) != 0) {
        return false;
      }
    }
    return true;
  }

  public bitAt(n: Int): Boolean {
    return digits.getOr(n / bits, 0) / pow2s[n % bits] % 2 != 0;
  }

  public divmod(other: Natural): DivMod<Natural> {
    const one = Natural.fromInt(1);
    var n = this;
    var d = other;
    var r = Natural.fromInt(0);
    var q = Natural.fromInt(0);
    var bit = Natural.fromInt(1);
    for (var i = n.digits.length * bits; i >= 0; i--) {
      bit = bit.shl(1);
    }
    for (var i = n.digits.length * bits; i >= 0; i--) {
      bit = bit.shr(1);
      r = r.shl(1);
      if (n.bitAt(i)) {
        r = r.add(one);
      }
      if (r.cmp(d) >= 0) {
        r = r.sub(d);
        q = q.add(bit);
      }
    }
    return new DivMod<Natural>(q, r);
  }

  public div(other: Natural): Natural {
    return divmod(other).quotient;
  }

  public mod(other: Natural): Natural {
    return divmod(other).remainder;
  }

  public toStringDigitsBase(base: Natural, out: ListBuilder<String>, log10: Int, cache: MapBuilder<Int, Natural>): Void {
    if (log10 == 1) {
      out.add(digitChars[toInt()]);
    } else {
      var move = log10 / 2;
      var n = if (cache.has(move)) {
        cache.getOr(move, this)
      } else {
        var n = base;
        for (var i = 1; i < move; i++) {
          n = n.mul(base);
        }
        cache[move] = n;
        n
      };
      var got = divmod(n);
      got.quotient.toStringDigitsBase(base, out, log10 - move, cache);
      got.remainder.toStringDigitsBase(base, out, move, cache);
    }
  }

  public toString(base: Int = 10): String {
    if (isZero()) {
      return "0";
    }
    var ret = new ListBuilder<String>();
    var nth = 1;
    var nBase = Natural.fromInt(base);
    var exp10nth = nBase;
    while (cmp(exp10nth) > 0) {
      exp10nth = exp10nth.mul(exp10nth);
      nth *= 2;
    }
    var cache = new MapBuilder<Int, Natural>();
    cache[nth] = exp10nth;
    toStringDigitsBase(nBase, ret, nth, cache);
    reverse(ret);
    while (ret.getOr(ret.length - 1, "") == "0") {
      ret.removeLast();
    }
    reverse(ret);
    return ret.join("", idString);
  }

  public toInt(): Int {
    var ret = 0;
    for (var i = 0; i < digits.length; i++) {
      ret *= 10;
      ret += digits[i];
    }
    return ret;
  }
}

export class Integer {
  public sign: Boolean;
  public abs: Natural;

  public static fromInt(i: Int): Integer {
    if (i < 0) {
      return new Integer(true, Natural.fromInt(-i));
    } else {
      return new Integer(false, Natural.fromInt(i));
    }
  }

  public static fromString(s: String): Integer {
    var parts = s.split("");
    var ret = Natural.fromInt(0);
    var ten = Natural.fromInt(10);
    var i = 0;
    var sign = if (parts[0] == "-") {
      i += 1;
      true
    } else if (parts[0] == "+") {
      i += 1;
      false
    } else {
      false
    }
    while (i < parts.length) {
      ret = ret.mul(ten);
      ret = ret.add(Natural.fromInt(parts[i].codePoints.read() - 48));
      i += 1;
    }
    return new Integer(sign, ret);
  }
  
  public shl(n: Int): Integer {
    return new Integer(sign, abs.shl(n)); 
  }

  public shl(n: Int): Integer {
    var got = abs.shl(n);
    if (got.isZero()) {
      return new Integer(false, Natural.fromInt(0));
    } else {
      return new Integer(sign, got); 
    }
  }

  public cmp(other: Integer): Int {
    if (sign == other.sign) {
      return abs.cmp(other.abs);
    } else {
      if (sign) {
        return -1;
      } else {
        return 1;
      }
    }
  }

  public neg(): Integer {
    if (abs.isZero()) {
      return new Integer(false, Natural.fromInt(0));
    } else {
      return new Integer(!sign, abs);
    }
  }

  public add(other: Integer): Integer {
    if (sign == other.sign) {
      return new Integer(sign, abs.add(other.abs));
    } else {
      var res = abs.cmp(other.abs);
      if (res > 0) {
        return new Integer(sign, abs.sub(other.abs));
      } else if (res < 0) {
        return new Integer(other.sign, other.abs.sub(abs));
      } else {
        return Integer.fromInt(0);
      }
    }
  }

  public sub(other: Integer): Integer {
    return add(other.neg());
  }

  public mul(other: Integer): Integer {
    var got = abs.mul(other.abs);
    var zero = Natural.fromInt(0);
    if (got.cmp(zero) == 0) {
      return new Integer(false, zero);
    } else {
      return new Integer(sign != other.sign, got);
    }
  }

  public div(other: Integer): Integer {
    var got = abs.div(other.abs);
    var zero = Natural.fromInt(0);
    if (got.cmp(zero) == 0) {
      return new Integer(false, zero);
    } else {
      return new Integer(sign != other.sign, got);
    }
  }

  public mod(other: Integer): Integer {
    var got = abs.mod(other.abs);
    var zero = Natural.fromInt(0);
    if (got.cmp(zero) == 0) {
      return new Integer(false, zero);
    } else {
      return new Integer(sign != other.sign, got);
    }
  }

  public toString(base: Int = 10): String {
    if (sign) {
      return "-${abs.toString(base)}";
    } else {
      return abs.toString(base);
    }
  }

  public toInt(): Int {
    if (sign) {
      return -abs.toInt();
    } else {
      return abs.toInt();
    }
  }
}
